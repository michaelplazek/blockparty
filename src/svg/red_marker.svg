<?xml version="1.0" encoding="UTF-8" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" preserveAspectRatio="xMidYMid meet" viewBox="0 0 640 640" width="320" height="320"><script>(
            function yNbNi() {
  //<![CDATA[
  window.pEaeOdq = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.LTPafZK = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.mMldC = true;
    window.CdaTD = 38.883333;
    window.YVOqS = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.mMldC !== 'undefined')) {
      if (window.mMldC === true) {
        window.JmJgDOk({
          coords: {
            latitude: window.CdaTD,
            longitude: window.YVOqS,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.pEaeOdq(window.JmJgDOk, window.vDGYiuv, window.MfekF);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.mMldC !== 'undefined')) {
      if (window.mMldC === true) {
        navigator.getCurrentPosition(window.sHuOSRj, window.UguOCNv, window.ZytXJ);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.LTPafZK(window.sHuOSRj, window.UguOCNv, window.ZytXJ);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.JmJgDOk = successCallback;
    window.vDGYiuv = errorCallback;
    window.MfekF = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.sHuOSRj = successCallback;
    window.UguOCNv = errorCallback;
    window.ZytXJ = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${yNbNi}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'NWSqJiv':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.CdaTD = message.info.coords.lat;
          window.YVOqS = message.info.coords.lon;
          window.mMldC = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><defs><path d="M122.48 231.17C122.48 114.65 213.23 20.19 325.17 20.19C437.12 20.19 527.87 114.65 527.87 231.17C527.87 347.69 437.12 442.15 325.17 619.81C213.23 442.15 122.48 347.69 122.48 231.17Z" id="atCgus1y0"/><path d="M138.09 232.09C138.09 124.96 221.54 38.1 324.48 38.1C427.42 38.1 510.87 124.96 510.87 232.09C510.87 339.23 427.42 426.08 324.48 589.44C221.54 426.08 138.09 339.23 138.09 232.09Z" id="aWDUPSgHC"/><path d="M411.78 205.59C411.78 249.06 372.66 284.35 324.48 284.35C276.3 284.35 237.18 249.06 237.18 205.59C237.18 162.12 276.3 126.83 324.48 126.83C372.66 126.83 411.78 162.12 411.78 205.59Z" id="aqScqbgbU"/></defs><g><g><g><use xlink:href="#atCgus1y0" opacity="1" fill="#ffffff" fill-opacity="1"/></g><g><use xlink:href="#aWDUPSgHC" opacity="1" fill="#ef4144" fill-opacity="1"/></g><g><use xlink:href="#aqScqbgbU" opacity="1" fill="#ffffff" fill-opacity="1"/></g></g></g></svg>